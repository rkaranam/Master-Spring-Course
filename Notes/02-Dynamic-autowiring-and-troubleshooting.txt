1. What happens when we tried to add @Component for both BubbleSortAlgorithm and QuickSortAlgorithm?

***************************
APPLICATION FAILED TO START
***************************

Description:

Field sortAlgorithm in com.in28minutes.spring.basics.springin5steps.BinarySearchImpl required a single bean, but 2 were found:
	- bubbleSortAlgorithm: defined in file [path\spring-in-5-steps\target\classes\com\in28minutes\spring\basics\springin5steps\BubbleSortAlgorithm.class]
	- quickSortAlgorithm: defined in file [path\spring-in-5-steps\target\classes\com\in28minutes\spring\basics\springin5steps\QuickSortAlgorithm.class]


Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed

2. What happens when we remove @Component for both BubbleSortAlgorithm and QuickSortAlgorithm when only @Autowired is used and there is no constructor injection?

***************************
APPLICATION FAILED TO START
***************************

Description:

Field sortAlgorithm in com.in28minutes.spring.basics.springin5steps.BinarySearchImpl required a bean of type 'com.in28minutes.spring.basics.springin5steps.SortAlgorithm' that could not be found.


Action:

Consider defining a bean of type 'com.in28minutes.spring.basics.springin5steps.SortAlgorithm' in your configuration.

3. What happens when we remove @Component for both BubbleSortAlgorithm and QuickSortAlgorithm when both @Autowired and constructor injection are used?

***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.in28minutes.spring.basics.springin5steps.BinarySearchImpl required a bean of type 'com.in28minutes.spring.basics.springin5steps.SortAlgorithm' that could not be found.


Action:

Consider defining a bean of type 'com.in28minutes.spring.basics.springin5steps.SortAlgorithm' in your configuration.

4. What happens when we remove @Component from BinarySearchImpl Class?

Exception in thread "main" org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.in28minutes.spring.basics.springin5steps.BinarySearchImpl' available
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:348)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:335)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1101)
	at com.in28minutes.spring.basics.springin5steps.SpringIn5StepsApplication.main(SpringIn5StepsApplication.java:24)


@Primary vs @Qualifier:

If there is a default bean (a bean you prefer over all others) that you want to use most of the times, then go for @Primary and use @Qualifier for non-default scenarios.

If all of the beans have same priority, we would go with @Qualifier always.